name: deploy-openai-app
"on":
    push:
        branches:
            - openai-pipeline
    # workflow_dispatch: {}
env:
    ACR_RESOURCE_GROUP: openai-embedding-rg-tv23
    AZURE_CONTAINER_REGISTRY: craksembedtv23lsv6765r3goa2
    CLUSTER_NAME: aks-aksembed-tv23
    CLUSTER_RESOURCE_GROUP: openai-embedding-rg-tv23
    CONTAINER_NAME: oai-embeddings
    KUSTOMIZE_PATH: ./Scenarios/AKS-OpenAI-CogServe-Redis-Embeddings/kubernetes/
    KV_NAME: kv-aksembedtv23lsv6765r3
    OPENAI_API_BASE: https://aksembedtv23.openai.azure.com/
    OPENAI_ENGINE: gpt-35-turbo
    OPENAI_EMBEDDINGS_ENGINE: text-embedding-ada-002
    LOCATION: eastus
    BLOB_ACCOUNT_NAME: aksembedtv23sa
    FORM_RECOGNIZER_ENDPOINT: https://eastus.api.cognitive.microsoft.com/
    INGRESS_IP: 20.85.174.166


jobs:
    buildImage:
        permissions:
            contents: read
            id-token: write
        runs-on: ubuntu-latest
        steps:
            - uses: actions/checkout@v3
              with:
                submodules: 'true'
            - uses: azure/login@92a5484dfaf04ca78a94597f4f19fea633851fa2
              name: Azure login
              with:
                client-id: ${{ secrets.AZURE_CLIENT_ID }}
                subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
                tenant-id: ${{ secrets.AZURE_TENANT_ID }}
            - name: Build and push image to ACR
              run: az acr build --image ${{ env.CONTAINER_NAME }}:${{ github.sha }} --registry ${{ env.AZURE_CONTAINER_REGISTRY }} -g ${{ env.ACR_RESOURCE_GROUP }} -f ./Scenarios/AKS-OpenAI-CogServe-Redis-Embeddings/App/WebApp.Dockerfile ./Scenarios/AKS-OpenAI-CogServe-Redis-Embeddings/App/
    deploy:
        permissions:
            actions: read
            contents: read
            id-token: write
        runs-on: ubuntu-latest
        needs:
         - buildImage
        steps:
            - uses: actions/checkout@v3
            - uses: azure/login@92a5484dfaf04ca78a94597f4f19fea633851fa2
              name: Azure login
              with:
                client-id: ${{ secrets.AZURE_CLIENT_ID }}
                subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
                tenant-id: ${{ secrets.AZURE_TENANT_ID }}
            - uses: azure/use-kubelogin@v1
              name: Set up kubelogin for non-interactive login
              with:
                kubelogin-version: v0.0.25
            - uses: azure/aks-set-context@v3
              name: Get K8s context
              with:
                admin: "false"
                cluster-name: ${{ env.CLUSTER_NAME }}
                resource-group: ${{ env.CLUSTER_RESOURCE_GROUP }}
                use-kubelogin: "true"
            - name: Assign AKS role to Azure AD Workload Identity
              uses: Azure/cli@v1.0.8
              with:
                # Specify the script here
                inlineScript: |
                  az role assignment create --assignee-object-id ${{ secrets.AZURE_OBJECT_ID }} \
                    --role 'Azure Kubernetes Service RBAC Cluster Admin' \
                    --scope /subscriptions/${{ secrets.AZURE_SUBSCRIPTION_ID }}/resourceGroups/${{ env.CLUSTER_RESOURCE_GROUP }}/providers/Microsoft.ContainerService/managedClusters/${{ env.CLUSTER_NAME }}

            # Store the resource keys Key Vault Secrets
            - name: Store the resource keys Key Vault Secrets 
              shell: bash
              run: |
                KV_NAME=$(az deployment sub show --name main-$UNIQUESTRING --query properties.outputs.kvAppName.value -o tsv) && echo "The Key Vault name is: $KV_NAME"
                OIDCISSUERURL=$(az deployment sub show --name main-$UNIQUESTRING --query properties.outputs.aksOidcIssuerUrl.value -o tsv) && echo "The OIDC Issue URL is: $OIDCISSUERURL"
                AKSCLUSTER=$(az deployment sub show --name main-$UNIQUESTRING --query properties.outputs.aksClusterName.value -o tsv) && echo "The AKS cluster name is: $AKSCLUSTER"
                BLOB_ACCOUNT_NAME=$(az deployment sub show --name main-$UNIQUESTRING --query properties.outputs.blobAccountName.value -o tsv) && echo "The Azure Storage Blob account name is: $BLOB_ACCOUNT_NAME"
                FORMREC_ACCOUNT=$(az deployment sub show --name main-$UNIQUESTRING --query properties.outputs.formRecognizerName.value -o tsv) && echo "The Document Intelligence account name is: $FORMREC_ACCOUNT"
                FORM_RECOGNIZER_ENDPOINT=$(az deployment sub show --name main-$UNIQUESTRING --query properties.outputs.formRecognizerEndpoint.value -o tsv) && echo "The Document Intelligence endpoint URL is: $FORM_RECOGNIZER_ENDPOINT"
                TRANSLATOR_ACCOUNT=$(az deployment sub show --name main-$UNIQUESTRING --query properties.outputs.translatorName.value -o tsv) && echo "The Translator account name is: $TRANSLATOR_ACCOUNT"
                OPENAI_ACCOUNTNAME=$(az deployment sub show --name main-$UNIQUESTRING --query properties.outputs.openAIAccountName.value -o tsv) && echo "The Azure OpenAI account name is: $OPENAI_ACCOUNTNAME"
                OPENAI_API_BASE=$(az deployment sub show --name main-$UNIQUESTRING  --query properties.outputs.openAIURL.value -o tsv) && echo "The Azure OpenAI instance API URL is: $OPENAI_API_BASE"
                OPENAI_RGNAME=$(az deployment sub show --name main-$UNIQUESTRING  --query properties.outputs.openAIRGName.value -o tsv) && echo "The Azure OpenAI Resource Group is: $OPENAI_RGNAME"
                OPENAI_ENGINE=$(az deployment sub show --name main-$UNIQUESTRING  --query properties.outputs.openAIEngineName.value -o tsv) && echo "The Azure OpenAI GPT Model is: $OPENAI_ENGINE"
                OPENAI_EMBEDDINGS_ENGINE=$(az deployment sub show --name main-$UNIQUESTRING  --query properties.outputs.openAIEmbeddingEngine.value -o tsv) && echo "The Azure OpenAI Embedding Model is: $OPENAI_EMBEDDINGS_ENGINE"
                ACR_NAME=$(az acr list -g $RGNAME --query '[0]'.name -o tsv)  && echo "The Azure Container Registry name is: $ACR_NAME"
                
                az keyvault secret set --name openaiapikey  --vault-name $KV_NAME --value $(az cognitiveservices account keys list -g $OPENAI_RGNAME -n $OPENAI_ACCOUNTNAME --query key1 -o tsv)
                az keyvault secret set --name formrecognizerkey  --vault-name $KV_NAME --value $(az cognitiveservices account keys list -g $RGNAME -n $FORMREC_ACCOUNT --query key1 -o tsv)
                az keyvault secret set --name translatekey  --vault-name $KV_NAME --value $(az cognitiveservices account keys list -g $RGNAME -n $TRANSLATOR_ACCOUNT --query key1 -o tsv)
                az keyvault secret set --name blobaccountkey  --vault-name $KV_NAME --value $(az storage account keys list -g $RGNAME -n $BLOB_ACCOUNT_NAME --query \[1\].value -o tsv)

                echo Done.


            # Save Kustomization variables
            - name: Save variables 
              shell: bash
              run: |
                cat << EOF > ./Scenarios/AKS-OpenAI-CogServe-Redis-Embeddings/kubernetes/.env
                CLIENT_ID=${{ secrets.CLIENT_ID }}
                TENANT_ID=${{ secrets.AZURE_TENANT_ID }}
                KV_NAME=${{ env.KV_NAME }}
                OPENAI_API_BASE=${{ env.OPENAI_API_BASE }}
                OPENAI_ENGINE=${{ env.OPENAI_ENGINE }}
                OPENAI_EMBEDDINGS_ENGINE=${{ env.OPENAI_EMBEDDINGS_ENGINE }}
                LOCATION=${{ env.LOCATION }}
                BLOB_ACCOUNT_NAME=${{ env.BLOB_ACCOUNT_NAME }}
                FORM_RECOGNIZER_ENDPOINT=${{ env.FORM_RECOGNIZER_ENDPOINT }}
                DNS_NAME=openai.${{ env.INGRESS_IP }}.nip.io
                ACR_IMAGE=${{ env.AZURE_CONTAINER_REGISTRY }}.azurecr.io/oai-embeddings:v1
                EOF
                
            # Runs Kustomize to create manifest files
            - name: Bake deployment
              uses: azure/k8s-bake@v2
              with:
                renderEngine: "kustomize"
                kustomizationPath: ${{ env.KUSTOMIZE_PATH }}
                kubectl-version: latest
              id: bake

            # Deploys application based on manifest files from previous step
            - name: Deploy application
              uses: Azure/k8s-deploy@v4
              with:
                action: deploy
                manifests: ${{ steps.bake.outputs.manifestsBundle }}
                namespace: default
                images: |
                  ${{ env.AZURE_CONTAINER_REGISTRY }}.azurecr.io/${{ env.CONTAINER_NAME }}:${{ github.sha }}

      
